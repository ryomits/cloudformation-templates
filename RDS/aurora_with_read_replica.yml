AWSTemplateFormatVersion: 2010-09-09
Description: Aurora sample
Parameters:
  DBUsername:
    Default: root
    Description: The database master account username
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    Description: Password of RDS master password
    Type: String
    NoEcho: true
    MinLength: 8
  DBInstanceType:
    Description: DB instance type
    Type: String
    Default: db.t2.small
    AllowedValues:
      - db.t2.small
      - db.t2.medium
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
      - db.r4.16xlarge
Conditions: {}
Mappings:
  AWSAmazonLinuxAMI:
    ap-northeast-1:
      '201803': ami-92df37ed
  StackConfig:
    VPC:
      CIDR: 10.16.0.0/16
    FrontendSubnet1:
      CIDR: 10.16.0.0/24
    FrontendSubnet2:
      CIDR: 10.16.1.0/24
    ApplicationSubnet1:
      CIDR: 10.16.100.0/24
    ApplicationSubnet2:
      CIDR: 10.16.101.0/24
    DatastoreSubnet1:
      CIDR: 10.16.200.0/24
    DatastoreSubnet2:
      CIDR: 10.16.201.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - StackConfig
        - VPC
        - CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref AWS::StackName
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${AWS::StackName}PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${AWS::StackName}PrivateRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  FrontendSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !FindInMap
        - StackConfig
        - FrontendSubnet1
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${AWS::StackName}FrontendSubnet1
  FrontendSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !FindInMap
        - StackConfig
        - FrontendSubnet2
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${AWS::StackName}FrontendSubnet2
  ApplicationSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - StackConfig
        - ApplicationSubnet1
        - CIDR
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${AWS::StackName}ApplicationSubnet1
  ApplicationSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - StackConfig
        - ApplicationSubnet2
        - CIDR
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${AWS::StackName}ApplicationSubnet2
  DatastoreSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - StackConfig
        - DatastoreSubnet1
        - CIDR
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${AWS::StackName}DatastoreSubnet1
  DatastoreSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - StackConfig
        - DatastoreSubnet2
        - CIDR
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${AWS::StackName}DatastoreSubnet2
  FrontendSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet1
      RouteTableId: !Ref PublicRouteTable
  FrontendSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet2
      RouteTableId: !Ref PublicRouteTable
  ApplicationSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet1
      RouteTableId: !Ref PublicRouteTable
  ApplicationSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet2
      RouteTableId: !Ref PublicRouteTable
  DatastoreSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatastoreSubnet1
      RouteTableId: !Ref PrivateRouteTable
  DatastoreSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatastoreSubnet2
      RouteTableId: !Ref PrivateRouteTable
  VPCDefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow all communications in VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !FindInMap
            - StackConfig
            - VPC
            - CIDR
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: !FindInMap
            - StackConfig
            - VPC
            - CIDR
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !FindInMap
            - StackConfig
            - VPC
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}VPCDefaultSecurityGroup
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Marker security group for database server.
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Enable RDS Multi-AZ access
      SubnetIds:
        - !Ref DatastoreSubnet1
        - !Ref DatastoreSubnet2
  RDSDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: CloudFormation Aurora Cluster Parameter Group
      Family: aurora-mysql5.7
      Parameters:
        character_set_database: utf8
        time_zone: Asia/Tokyo
  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: CloudFormation Aurora Parameter Group
      Family: aurora-mysql5.7
      Parameters:
        sql_mode: IGNORE_SPACE
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup
      Engine: aurora-mysql
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSSubnetGroup
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref VPCDefaultSecurityGroup
        - !Ref DatabaseSecurityGroup
  RDSInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBParameterGroupName: !Ref RDSDBParameterGroup
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: false
      AvailabilityZone: !GetAtt DatastoreSubnet1.AvailabilityZone
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DBInstanceClass: !Ref DBInstanceType
  RDSInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBParameterGroupName: !Ref RDSDBParameterGroup
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: false
      AvailabilityZone: !GetAtt DatastoreSubnet2.AvailabilityZone
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DBInstanceClass: !Ref DBInstanceType

Outputs:
  RDSClusterEndpointAddress:
    Value: !GetAtt RDSCluster.Endpoint.Address
  RDSClusterEndpointPort:
    Value: !GetAtt RDSCluster.Endpoint.Port
  RDSClusterReadEndpointAddress:
    Value: !GetAtt RDSCluster.ReadEndpoint.Address
